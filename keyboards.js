const { pieTypes, currencySymbol } = require('./config');
const { formatNumber } = require('./utils');
const db = require('./db');

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏'],
            ['üì¶ –í–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–∫–∏', 'üóëÔ∏è –°–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é'],
            ['üí∞ –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'],
            ['üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∏—Ä–æ–∂–∫–∞ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö)
const pieTypesKeyboard = {
    reply_markup: {
        inline_keyboard: [
            ...pieTypes.map(type => ([{ text: type, callback_data: `add_pie_${type}` }])),
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_from_add' }]
        ]
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ù–∞—Å—Ç—Ä–æ–µ–∫
async function createSettingsKeyboard(chatId) {
    const currentPrices = await db.getPricesFromDb(chatId);
    const buttons = pieTypes.map(type => {
        const priceText = currentPrices[type] > 0 ? `(${formatNumber(currentPrices[type])} ${currencySymbol})` : '(–Ω–µ –∑–∞–¥–∞–Ω–∞)';
        return [{ text: `üí≤ ${type} ${priceText}`, callback_data: `set_price_${type}` }];
    });
    buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_settings' }]);
    return { reply_markup: { inline_keyboard: buttons } };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –í–≤–æ–¥–∞ –û—Å—Ç–∞—Ç–∫–æ–≤
async function createRemainingKeyboard(chatId) {
    const logs = await db.getTodaysLogsGrouped(chatId);
    const buttons = pieTypes
        .filter(type => (logs[type]?.manufactured || 0) > 0)
        .map(type => {
            const log = logs[type];
            const manufactured = log?.manufactured || 0;
            const remainingText = (log?.remaining !== null && log?.remaining !== undefined) ? log.remaining : '–Ω–µ –≤–≤–µ–¥–µ–Ω–æ';
            return [{ text: `üì¶ ${type} (${formatNumber(manufactured)} / ${remainingText})`, callback_data: `enter_remaining_${type}` }];
        });

    if (buttons.length > 0) {
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_remaining' }]);
    } else {
        buttons.push([{ text: '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏', callback_data: 'no_pies_for_remaining' }]);
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_remaining' }]);
    }
    return { reply_markup: { inline_keyboard: buttons } };
}

// --- –ù–û–í–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –°–ü–ò–°–ê–ù–ò–ô ---
async function createWriteOffKeyboard(chatId) {
    console.log(`[${chatId}] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∞–Ω–∏–π...`);
    const logs = await db.getTodaysLogsGrouped(chatId);

    const buttons = pieTypes
        .filter(type => (logs[type]?.remaining || 0) > 0) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∏—Ä–æ–∂–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0
        .map(type => {
            const log = logs[type];
            const remaining = log?.remaining || 0;
            const writtenOff = log?.written_off || 0;
            return [{ text: `üóëÔ∏è ${type} (–æ—Å—Ç–∞—Ç–æ–∫: ${remaining}, —Å–ø–∏—Å–∞–Ω–æ: ${writtenOff})`, callback_data: `write_off_${type}` }];
        });

    if (buttons.length > 0) {
        buttons.push([{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –≥–ª. –º–µ–Ω—é', callback_data: 'back_to_main_from_writeoff' }]);
    } else {
        buttons.push([{ text: '–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è', callback_data: 'no_pies_for_writeoff' }]);
    }

    return {
        reply_markup: {
            inline_keyboard: buttons
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const statsPeriodKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'stats_period_today' },
                { text: 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'stats_period_week' }
            ],
            [
                { text: 'üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü', callback_data: 'stats_period_month' },
                { text: '‚úçÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã', callback_data: 'stats_period_custom' }
            ],
            [
                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main_from_stats' }
            ]
        ]
    }
};

module.exports = {
    mainKeyboard,
    pieTypesKeyboard,
    statsPeriodKeyboard,
    createSettingsKeyboard,
    createRemainingKeyboard,
    createWriteOffKeyboard // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
};