const TelegramBot = require('node-telegram-bot-api');
const express =require('express');
const cron = require('node-cron');
const config = require('./config');
const utils = require('./utils');
const db = require('./db');
const keyboards = require('./keyboards');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const app = express();
const port = process.env.PORT || 3000;
app.get('/', (req, res) => res.send('Bot is running'));
app.listen(port, () => console.log(`Server running on port ${port}`));

const bot = new TelegramBot(config.token, { polling: true });
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

let userState = {};
function initializeUserState(chatId) {
    if (!userState[chatId]) {
        userState[chatId] = { action: null, data: {} };
    }
}

// --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–ß–ï–¢–ê ---
async function generateAndSendReport(chatId, startDate, endDate, messageId = null, isScheduled = false) {
    const periodTitle = startDate === endDate ? `–∑–∞ ${startDate}` : `–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDate} –ø–æ ${endDate}`;
    const reportHeader = isScheduled ? `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç ${periodTitle}` : `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${periodTitle}`;
    
    console.log(`[${chatId}] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${periodTitle}`);
    if (messageId) {
        await bot.editMessageText(`‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ${periodTitle}...`, { chat_id: chatId, message_id: messageId, reply_markup: { inline_keyboard: [] } }).catch(e => console.warn(e.message));
    } else {
        bot.sendChatAction(chatId, 'typing');
    }

    const stats = await db.getStatsForPeriod(chatId, startDate, endDate);
    if (!stats) {
        bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ${periodTitle}.`, keyboards.mainKeyboard);
        return;
    }

    let report = `üìä ${reportHeader}:\n\n`;
    config.pieTypes.forEach(type => {
        const pieStat = stats.pies[type] || { manufactured: 0, sold: 0, revenue: 0, price: stats.prices[type] || 0, written_off: 0, loss: 0 };
        report += `"${type}" (—Ü–µ–Ω–∞: ${utils.formatNumber(pieStat.price)} ${config.currencySymbol}):\n`;
        report += `- –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: ${utils.formatNumber(pieStat.manufactured)}\n`;
        report += `- –ü—Ä–æ–¥–∞–Ω–æ: ${utils.formatNumber(pieStat.sold)} —à—Ç.\n`;
        if (pieStat.written_off > 0) {
            report += `- –°–ø–∏—Å–∞–Ω–æ: ${utils.formatNumber(pieStat.written_off)} —à—Ç. (–ø–æ—Ç–µ—Ä—è: ${utils.formatNumber(pieStat.loss)} ${config.currencySymbol})\n`;
        }
        report += `- –í—ã—Ä—É—á–∫–∞ (${type}): ${utils.formatNumber(pieStat.revenue)} ${config.currencySymbol}.\n\n`;
    });
    report += `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${utils.formatNumber(stats.totalRevenue)} ${config.currencySymbol}.\n`;
    if (stats.lossFromWriteOff > 0) {
        report += `üóëÔ∏è –ü–æ—Ç–µ—Ä–∏ –æ—Ç —Å–ø–∏—Å–∞–Ω–∏–π: ${utils.formatNumber(stats.lossFromWriteOff)} ${config.currencySymbol}.\n`;
    }
    report += `üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: ${utils.formatNumber(stats.expenses)} ${config.currencySymbol}.\n`;
    report += `üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${utils.formatNumber(stats.profit)} ${config.currencySymbol}.\n`;

    await bot.sendMessage(chatId, report, keyboards.mainKeyboard);
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    if (!utils.checkAccess(chatId)) {
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    initializeUserState(chatId);
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø–∏—Ä–æ–∂–∫–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!utils.checkAccess(chatId) || !text || text.startsWith('/')) return;

    initializeUserState(chatId);
    const state = userState[chatId];
    console.log(`[${chatId}] –¢–µ–∫—Å—Ç: "${text}" | –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state?.action || '–Ω–µ—Ç'}`);

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
    if (state && state.action) {
        // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ case'—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        switch (state.action) {
            case 'awaiting_pie_quantity': {
                const quantity = parseInt(text, 10);
                if (isNaN(quantity) || quantity <= 0) { bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ –Ω—É–ª—è).'); return; }
                const pieType = state.data.type;
                const newTotal = await db.addManufacturedToDb(chatId, pieType, quantity);
                bot.sendMessage(chatId, newTotal !== null ? `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${utils.formatNumber(quantity)} "${pieType}".\n–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${utils.formatNumber(newTotal)}.` : `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`, keyboards.mainKeyboard);
                userState[chatId] = { action: null, data: {} };
                return;
            }
            case 'awaiting_remaining_input': {
                const quantity = parseInt(text, 10);
                const { pieType, manufactured } = state.data;
                if (isNaN(quantity) || quantity < 0) { bot.sendMessage(chatId, `‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).`); return; }
                if (quantity > manufactured) { bot.sendMessage(chatId, `‚ùå –û—Å—Ç–∞—Ç–æ–∫ (${quantity}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ (${manufactured}).`); return; }
                const success = await db.saveRemainingToDb(chatId, pieType, quantity);
                if (success) {
                    bot.sendMessage(chatId, `üëç –ó–∞–ø–∏—Å–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è "${pieType}": ${utils.formatNumber(quantity)}.`);
                    userState[chatId] = { action: null, data: {} };
                    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–∏—Ä–æ–∂–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥:', await keyboards.createRemainingKeyboard(chatId));
                } else {
                    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞.`, keyboards.mainKeyboard);
                    userState[chatId] = { action: null, data: {} };
                }
                return;
            }
            // --- –ù–û–í–´–ô CASE –î–õ–Ø –°–ü–ò–°–ê–ù–ò–ô ---
            case 'awaiting_write_off_quantity': {
                const quantity = parseInt(text, 10);
                const { pieType, remaining } = state.data;
                if (isNaN(quantity) || quantity <= 0) {
                    bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ –Ω—É–ª—è).'); return;
                }
                if (quantity > remaining) {
                    bot.sendMessage(chatId, `‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (${quantity}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞ (${remaining}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`); return;
                }
                const result = await db.processWriteOffInDb(chatId, pieType, quantity);
                if (result.success) {
                    bot.sendMessage(chatId, `‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ ${quantity} —à—Ç. "${pieType}".`);
                    userState[chatId] = { action: null, data: {} };
                    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:', await keyboards.createWriteOffKeyboard(chatId));
                } else {
                    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏: ${result.message}`, keyboards.mainKeyboard);
                    userState[chatId] = { action: null, data: {} };
                }
                return;
            }
            // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ case'—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            case 'awaiting_expenses_input': {
                const amount = parseFloat(text.replace(',', '.'));
                if (isNaN(amount) || amount < 0) { bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.'); return; }
                const newTotal = await db.saveExpensesToDb(chatId, amount);
                bot.sendMessage(chatId, newTotal !== null ? `‚úÖ –†–∞—Å—Ö–æ–¥—ã (${utils.formatNumber(amount)}) –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û–±—â–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${utils.formatNumber(newTotal)} ${config.currencySymbol}.` : `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`, keyboards.mainKeyboard);
                userState[chatId] = { action: null, data: {} };
                return;
            }
            case 'awaiting_price_input': {
                const price = parseFloat(text.replace(',', '.'));
                const { type } = state.data;
                if (isNaN(price) || price < 0) { bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.'); return; }
                const success = await db.savePriceToDb(chatId, type, price);
                bot.sendMessage(chatId, success ? `‚úÖ –¶–µ–Ω–∞ –¥–ª—è "${type}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${utils.formatNumber(price)} ${config.currencySymbol}.` : `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`);
                userState[chatId] = { action: null, data: {} };
                await bot.sendMessage(chatId, '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω:', await keyboards.createSettingsKeyboard(chatId));
                return;
            }
            case 'awaiting_custom_start_date': {
                if (!utils.isValidDate(text)) { bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:'); return; }
                userState[chatId] = { action: 'awaiting_custom_end_date', data: { startDate: text } };
                bot.sendMessage(chatId, '‚úÖ –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ü–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):');
                return;
            }
            case 'awaiting_custom_end_date': {
                if (!utils.isValidDate(text)) { bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:'); return; }
                const { startDate } = state.data;
                if (new Date(text) < new Date(startDate)) { bot.sendMessage(chatId, '‚ùå –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.'); return; }
                userState[chatId] = { action: null, data: {} };
                await generateAndSendReport(chatId, startDate, text);
                return;
            }
        }
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    switch (text) {
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Ä–æ–∂–∫–∏':
            bot.sendMessage(chatId, '–ö–∞–∫–æ–π —Ç–∏–ø –ø–∏—Ä–æ–∂–∫–æ–≤ –∏–∑–≥–æ—Ç–æ–≤–∏–ª–∏?', keyboards.pieTypesKeyboard);
            break;
        case 'üì¶ –í–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–∫–∏':
            bot.sendMessage(chatId, '–î–ª—è –∫–∞–∫–æ–≥–æ –ø–∏—Ä–æ–∂–∫–∞ –≤–≤–µ—Å—Ç–∏/–∏–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫?', await keyboards.createRemainingKeyboard(chatId));
            break;
        // --- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê ---
        case 'üóëÔ∏è –°–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é':
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (—Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0):', await keyboards.createWriteOffKeyboard(chatId));
            break;
        case 'üí∞ –í–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã':
            userState[chatId] = { action: 'awaiting_expenses_input', data: {} };
            bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ ${config.currencySymbol}:`);
            break;
        case 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', keyboards.statsPeriodKeyboard);
            break;
        case 'üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            bot.sendMessage(chatId, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –Ω–∞ –ø–∏—Ä–æ–∂–∫–∏:', await keyboards.createSettingsKeyboard(chatId));
            break;
        default:
            console.log(`[${chatId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–æ–º–∞–Ω–¥–∞: "${text}"`);
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;

    if (!utils.checkAccess(chatId)) {
        bot.answerCallbackQuery(callbackQuery.id, { text: '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.', show_alert: true });
        return;
    }

    initializeUserState(chatId);
    console.log(`[${chatId}] Callback: ${data}`);
    
    const hideKeyboard = async () => {
        try { await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: msg.message_id }); }
        catch (e) { await bot.deleteMessage(chatId, msg.message_id).catch(err => console.warn(err.message)); }
    };

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏–π ---
    if (data.startsWith('write_off_')) {
        const pieType = data.substring('write_off_'.length);
        const logEntry = await db.getDailyLogEntry(chatId, pieType);
        const remainingCount = logEntry.remaining || 0;

        if (remainingCount <= 0) {
            bot.answerCallbackQuery(callbackQuery.id, { text: `–£ "${pieType}" –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.`, show_alert: true });
            await bot.editMessageReplyMarkup((await keyboards.createWriteOffKeyboard(chatId)).reply_markup, { chat_id: chatId, message_id: msg.message_id });
            return;
        }
        userState[chatId] = { action: 'awaiting_write_off_quantity', data: { pieType, remaining: remainingCount } };
        await hideKeyboard();
        bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}"? (–í –æ—Å—Ç–∞—Ç–∫–µ: ${remainingCount}) –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:`);
        return bot.answerCallbackQuery(callbackQuery.id);
    }
    
    // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤)
    if (data.startsWith('stats_period_')) {
        const periodType = data.substring('stats_period_'.length);
        if (periodType === 'custom') {
            userState[chatId] = { action: 'awaiting_custom_start_date', data: {} };
            await hideKeyboard();
            bot.sendMessage(chatId, '‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):');
        } else {
            let startDate, endDate = utils.getCurrentDate();
            if (periodType === 'today') startDate = endDate;
            else if (periodType === 'week') { const d = new Date(); d.setDate(d.getDate() - 6); startDate = d.toISOString().split('T')[0]; }
            else if (periodType === 'month') { const d = new Date(); startDate = new Date(d.getFullYear(), d.getMonth(), 1).toISOString().split('T')[0]; }
            else { return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥' }); }
            await generateAndSendReport(chatId, startDate, endDate, msg.message_id);
        }
        return bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('add_pie_')) {
        const pieType = data.substring('add_pie_'.length);
        userState[chatId] = { action: 'awaiting_pie_quantity', data: { type: pieType } };
        await hideKeyboard();
        bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –ø–∏—Ä–æ–∂–∫–æ–≤ "${pieType}" –∏–∑–≥–æ—Ç–æ–≤–∏–ª–∏?`);
        return bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('enter_remaining_')) {
        const pieType = data.substring('enter_remaining_'.length);
        const logEntry = await db.getDailyLogEntry(chatId, pieType);
        const manufacturedCount = logEntry.manufactured || 0;
        if (manufacturedCount <= 0) {
            bot.answerCallbackQuery(callbackQuery.id, { text: `"${pieType}" —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.` });
            await bot.editMessageReplyMarkup((await keyboards.createRemainingKeyboard(chatId)).reply_markup, { chat_id: chatId, message_id: msg.message_id });
            return;
        }
        userState[chatId] = { action: 'awaiting_remaining_input', data: { pieType, manufactured: manufacturedCount } };
        const prevRem = (logEntry.remaining !== null) ? ` (—Ä–∞–Ω–µ–µ: ${logEntry.remaining})` : '';
        await hideKeyboard();
        bot.sendMessage(chatId, `–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å "${pieType}"? (–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: ${manufacturedCount}${prevRem})`);
        return bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('set_price_')) {
        const pieType = data.substring('set_price_'.length);
        userState[chatId] = { action: 'awaiting_price_input', data: { type: pieType } };
        await hideKeyboard();
        bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è "${pieType}" –≤ ${config.currencySymbol}:`);
        return bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('back_to_main_') || data.startsWith('no_pies_for_')) {
        await bot.deleteMessage(chatId, msg.message_id).catch(e => console.warn(e.message));
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.mainKeyboard);
        return bot.answerCallbackQuery(callbackQuery.id);
    } else {
        console.warn(`[${chatId}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: ${data}`);
        return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
});

// --- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ---
if (cron.validate(config.REPORT_SCHEDULE)) {
    cron.schedule(config.REPORT_SCHEDULE, async () => {
        console.log(`[CRON] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...`);
        const today = utils.getCurrentDate();
        const chatIds = config.ALLOWED_CHAT_IDS.split(',').map(id => id.trim());
        for (const chatId of chatIds) {
            try {
                console.log(`[CRON] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
                await generateAndSendReport(chatId, today, today, null, true);
                await new Promise(resolve => setTimeout(resolve, 500));
            } catch (error) {
                console.error(`[CRON] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç ${chatId}:`, error.message);
            }
        }
        console.log(`[CRON] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
    }, { scheduled: true, timezone: config.REPORT_TIMEZONE });
    console.log(`–ê–≤—Ç–æ-–æ—Ç—á–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${config.REPORT_SCHEDULE} (Timezone: ${config.REPORT_TIMEZONE})`);
} else {
    console.error(`!!! –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cron-—Å—Ç—Ä–æ–∫–∏: "${config.REPORT_SCHEDULE}"`);
}

bot.on('polling_error', (e) => console.error(`[Polling Error] ${e.message}`));
process.on('uncaughtException', (e, o) => console.error(`–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e}`, o));
process.on('unhandledRejection', (r, p) => console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π reject:', p, `–ü—Ä–∏—á–∏–Ω–∞: ${r}`));